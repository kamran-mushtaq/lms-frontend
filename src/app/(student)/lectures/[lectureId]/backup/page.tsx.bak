'use client';

import { useParams, useRouter } from 'next/navigation';
import { useState } from 'react';
import { useMediaQuery } from '@/hooks/use-media-query';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { 
  BookOpen, 
  FileText, 
  MessageSquare, 
  Clock,
  ChevronLeft,
  ChevronRight,
  ExternalLink,
  Download,
  Play,
  CheckCircle,
  AlertCircle,
  User,
  FileDown,
  Copy,
  Bookmark,
  MoreHorizontal
} from "lucide-react";

// Import custom hooks
import {
  useLecture,
  useNavigation,
  useProgress,
  useTranscript,
  useResources,
  useNotes
} from './hooks';

// Import components 
import { 
  VideoPlayerWithProgress,
  TranscriptViewer,
  NotesPanel,
  ResourcesPanel,
  LectureNavigator,
  LectureProgress,
  LectureHeader
} from './components';

export default function LecturePage() {
  const params = useParams();
  const router = useRouter();
  const lectureId = params?.lectureId as string;
  const isMobile = useMediaQuery('(max-width: 768px)');
  
  // UI state
  const [activeRightTab, setActiveRightTab] = useState('notes');
  
  // Use custom hooks for data fetching and state management
  const { 
    lecture, 
    loading: lectureLoading, 
    error: lectureError,
    watchProgress: initialProgress,
    timeSpent: initialTimeSpent,
    isCompleted: initialCompletionStatus
  } = useLecture(lectureId);
  
  const {
    navigationData,
    hasPrevious,
    hasNext,
    previousLectureId,
    nextLectureId
  } = useNavigation(lectureId, lecture.chapterId);
  
  const {
    watchProgress,
    timeSpent,
    isCompleted,
    handleProgressUpdate
  } = useProgress(
    lectureId, 
    initialProgress, 
    initialTimeSpent, 
    initialCompletionStatus
  );
  
  const {
    transcript,
    loading: loadingTranscript,
    error: transcriptError
  } = useTranscript(lectureId, lecture.hasTranscript);
  
  const {
    resources,
    loading: loadingResources,
    error: resourcesError
  } = useResources(lectureId);
  
  const {
    notes,
    loading: loadingNotes,
    error: notesError,
    refreshNotes
  } = useNotes(lectureId);

  // Navigation handlers
  const navigateToLecture = (targetLectureId: string) => {
    router.push(`/lectures/${targetLectureId}`);
  };

  const navigateToPrevious = () => {
    if (previousLectureId) {
      navigateToLecture(previousLectureId);
    }
  };

  const navigateToNext = () => {
    if (nextLectureId) {
      navigateToLecture(nextLectureId);
    }
  };

  // Format timestamp to readable time
  const formatTimestamp = (timestamp?: number) => {
    if (!timestamp) return '00:00';
    
    const minutes = Math.floor(timestamp / 60);
    const seconds = Math.floor(timestamp % 60);
    
    return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  // Loading state
  if (lectureLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="flex flex-col items-center gap-4">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
          <p className="text-sm text-muted-foreground">Loading lecture...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (lectureError) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <div className="w-full max-w-md text-center">
          <div className="rounded-full bg-red-100 p-3 w-12 h-12 mx-auto mb-4 flex items-center justify-center">
            <AlertCircle className="h-6 w-6 text-red-600" />
          </div>
          <h1 className="text-2xl font-bold mb-2">Failed to Load Lecture</h1>
          <p className="text-muted-foreground mb-6">{lectureError}</p>
          <div className="flex gap-2 justify-center">
            <Button onClick={() => router.back()}>
              <ChevronLeft className="h-4 w-4 mr-2" />
              Go Back
            </Button>
            <Button variant="outline" onClick={() => window.location.reload()}>
              Try Again
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // Get approximate file sizes for resources
  const getResourceSize = (resource: any) => {
    switch (resource.resourceType?.toLowerCase()) {
      case 'video':
        return '2.5gb';
      case 'subtitle':
        return '120kb';
      case 'transcript':
        return '226kb';
      case 'quiz':
      case 'document':
        return '20mb';
      default:
        return '1mb';
    }
  };

  // Get icons for resources
  const getResourceIcon = (resource: any) => {
    switch (resource.resourceType?.toLowerCase()) {
      case 'video':
        return <FileDown className="h-4 w-4" />;
      case 'subtitle':
        return <FileText className="h-4 w-4" />;
      case 'transcript':
        return <FileText className="h-4 w-4" />;
      case 'quiz':
        return <FileText className="h-4 w-4" />;
      default:
        return <FileDown className="h-4 w-4" />;
    }
  };

  return (
    <div className="flex flex-col w-full min-h-screen">
      {/* Main content grid */}
      <div className="grid grid-cols-1 md:grid-cols-12 gap-4 p-4 lg:p-6 h-screen overflow-hidden">
        {/* Left Sidebar - Course Navigation */}
        <div className="md:col-span-2 lg:col-span-2 overflow-y-auto border-r pr-4 h-screen pb-20">
          <div className="mb-4">
            <Button
              variant="ghost"
              size="sm"
              className="w-full justify-start"
              onClick={() => router.push(`/chapters/${lecture.chapterId}`)}
            >
              <ChevronLeft className="h-4 w-4 mr-2" />
              Back to Chapter
            </Button>
          </div>
          
          <h2 className="font-semibold text-lg mb-3">
            {navigationData.chapterTitle || 'Chapter Lectures'}
          </h2>
          
          <div className="space-y-1">
            {navigationData.lectures.map((lecItem, idx) => (
              <div 
                key={lecItem._id}
                className={`flex items-center justify-between p-2 ${lecItem._id === lectureId ? 'bg-muted' : 'hover:bg-muted/50'} rounded-md cursor-pointer`}
                onClick={() => navigateToLecture(lecItem._id)}
              >
                <div className="flex items-center gap-2">
                  <div className="w-6 h-6 flex items-center justify-center rounded-full bg-muted-foreground/10">
                    {idx + 1}
                  </div>
                  <span className="text-sm font-medium truncate">
                    {lecItem.title}
                  </span>
                </div>
                {lecItem.isCompleted && (
                  <CheckCircle className="h-4 w-4 text-primary flex-shrink-0" />
                )}
              </div>
            ))}
          </div>
        </div>
        
        {/* Center - Main Content */}
        <div className="md:col-span-7 lg:col-span-7 flex flex-col overflow-y-auto h-screen pb-20">
          {/* Lecture Header */}
          <div className="mb-4">
            <h1 className="text-2xl font-semibold mb-2">{lecture.title}</h1>
            <div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground">
              <div className="flex items-center gap-1">
                <User className="h-4 w-4" />
                <span>Instructor: {lecture.metadata?.instructor || 'Course Staff'}</span>
              </div>
              
              {lecture.duration && (
                <div className="flex items-center gap-1">
                  <Clock className="h-4 w-4" />
                  <span>{Math.floor(lecture.duration / 60)} minutes</span>
                </div>
              )}
              
              <div className="flex items-center gap-1">
                <MessageSquare className="h-4 w-4" />
                <span>{notes.length} Notes</span>
              </div>
              
              <Badge variant={isCompleted ? "default" : "secondary"} className="ml-auto">
                {isCompleted ? 'Completed' : `${Math.round(watchProgress)}% Complete`}
              </Badge>
            </div>
          </div>
          
          {/* Video Player */}
          <div className="mb-6">
            <div className="aspect-video bg-zinc-950 rounded-xl overflow-hidden shadow-md">
              <VideoPlayerWithProgress
                videoUrl={lecture.videoUrl || lecture.content?.data?.videoUrl}
                initialProgress={watchProgress}
                onProgressUpdate={handleProgressUpdate}
                poster={lecture.content?.data?.thumbnailUrl}
              />
            </div>
          </div>
          
          {/* Transcript Section */}
          <div className="flex-1">
            <h2 className="text-xl font-semibold mb-4">Full Transcript</h2>
            
            {loadingTranscript ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
              </div>
            ) : transcriptError ? (
              <div className="bg-red-50 text-red-700 p-4 rounded-md">
                {transcriptError}
              </div>
            ) : transcript.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                No transcript available for this lecture.
              </div>
            ) : (
              <div className="space-y-2">
                {transcript.map((segment, idx) => (
                  <div key={idx} className="group flex hover:bg-muted/50 p-2 rounded-md">
                    <div className="w-16 flex-shrink-0 text-primary font-mono text-sm">
                      {formatTimestamp(segment.start)}
                    </div>
                    <div className="flex-1">
                      <p>{segment.text}</p>
                    </div>
                    <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                      <Button variant="ghost" size="icon" className="h-8 w-8">
                        <Copy className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="icon" className="h-8 w-8">
                        <Bookmark className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="icon" className="h-8 w-8">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {/* Nav buttons */}
          <div className="mt-8 flex justify-between">
            <Button
              variant="outline"
              onClick={navigateToPrevious}
              disabled={!hasPrevious}
            >
              <ChevronLeft className="h-4 w-4 mr-2" />
              Previous Lecture
            </Button>
            <Button
              variant="outline"
              onClick={navigateToNext}
              disabled={!hasNext}
            >
              Next Lecture
              <ChevronRight className="h-4 w-4 ml-2" />
            </Button>
          </div>
        </div>
        
        {/* Right Sidebar - Notes & Resources */}
        <div className="md:col-span-3 lg:col-span-3 border-l pl-4 overflow-y-auto h-screen pb-20">
          <Tabs value={activeRightTab} onValueChange={setActiveRightTab}>
            <TabsList className="grid w-full grid-cols-2 mb-4">
              <TabsTrigger value="notes" className="flex items-center gap-2">
                <BookOpen className="h-4 w-4" />
                Notes
              </TabsTrigger>
              <TabsTrigger value="resources" className="flex items-center gap-2">
                <Download className="h-4 w-4" />
                Resources
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="notes">
              <div className="space-y-4">
                <h2 className="text-lg font-semibold">Your Notes</h2>
                
                <Button variant="outline" className="w-full" size="sm">
                  <Plus className="h-4 w-4 mr-2" />
                  Add New Note
                </Button>
                
                {loadingNotes ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
                  </div>
                ) : notesError ? (
                  <div className="bg-red-50 text-red-700 p-4 rounded-md">
                    {notesError}
                  </div>
                ) : notes.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    No notes yet. Create your first note!
                  </div>
                ) : (
                  <Accordion type="multiple" className="w-full">
                    {notes.map((note, idx) => (
                      <AccordionItem key={note._id} value={note._id}>
                        <AccordionTrigger>
                          <div className="flex flex-col items-start">
                            <span className="font-medium text-sm">
                              {note.content.substring(0, 25)}...
                            </span>
                            {note.timestamp && (
                              <span className="text-xs text-muted-foreground">
                                {formatTimestamp(note.timestamp)}
                              </span>
                            )}
                          </div>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="space-y-2">
                            <p className="text-sm whitespace-pre-wrap">{note.content}</p>
                            {note.tags && note.tags.length > 0 && (
                              <div className="flex flex-wrap gap-1">
                                {note.tags.map(tag => (
                                  <Badge key={tag} variant="secondary" className="text-xs">
                                    {tag}
                                  </Badge>
                                ))}
                              </div>
                            )}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    ))}
                  </Accordion>
                )}
              </div>
            </TabsContent>
            
            <TabsContent value="resources">
              <div className="space-y-4">
                <h2 className="text-lg font-semibold">Resources</h2>
                
                {loadingResources ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
                  </div>
                ) : resourcesError ? (
                  <div className="bg-red-50 text-red-700 p-4 rounded-md">
                    {resourcesError}
                  </div>
                ) : resources.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    No resources available for this lecture.
                  </div>
                ) : (
                  <div className="space-y-2">
                    {resources.map((resource, idx) => (
                      <div key={idx} className="flex items-center justify-between p-2 hover:bg-muted rounded-md">
                        <div className="flex items-center gap-3">
                          {getResourceIcon(resource)}
                          <div>
                            <div className="font-medium text-sm">{resource.title}</div>
                            <div className="text-xs text-muted-foreground">
                              {getResourceSize(resource)}
                            </div>
                          </div>
                        </div>
                        <Button variant="ghost" size="sm">
                          <Download className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}
